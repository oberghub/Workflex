{"ast":null,"code":"\n\n!function () {\n  'use strict';\n\n  var re = {\n    not_string: /[^s]/,\n    not_bool: /[^t]/,\n    not_type: /[^T]/,\n    not_primitive: /[^v]/,\n    number: /[diefg]/,\n    numeric_arg: /[bcdiefguxX]/,\n    json: /[j]/,\n    not_json: /[^j]/,\n    text: /^[^\\x25]+/,\n    modulo: /^\\x25{2}/,\n    placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n    key: /^([a-z_][a-z_\\d]*)/i,\n    key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n    index_access: /^\\[(\\d+)\\]/,\n    sign: /^[+-]/\n  };\n  function sprintf(key) {\n    return sprintf_format(sprintf_parse(key), arguments);\n  }\n  function vsprintf(fmt, argv) {\n    return sprintf.apply(null, [fmt].concat(argv || []));\n  }\n  function sprintf_format(parse_tree, argv) {\n    var cursor = 1,\n      tree_length = parse_tree.length,\n      arg,\n      output = '',\n      i,\n      k,\n      ph,\n      pad,\n      pad_character,\n      pad_length,\n      is_positive,\n      sign;\n    for (i = 0; i < tree_length; i++) {\n      if (typeof parse_tree[i] === 'string') {\n        output += parse_tree[i];\n      } else if (typeof parse_tree[i] === 'object') {\n        ph = parse_tree[i];\n        if (ph.keys) {\n          arg = argv[cursor];\n          for (k = 0; k < ph.keys.length; k++) {\n            if (arg == undefined) {\n              throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k - 1]));\n            }\n            arg = arg[ph.keys[k]];\n          }\n        } else if (ph.param_no) {\n          arg = argv[ph.param_no];\n        } else {\n          arg = argv[cursor++];\n        }\n        if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n          arg = arg();\n        }\n        if (re.numeric_arg.test(ph.type) && typeof arg !== 'number' && isNaN(arg)) {\n          throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));\n        }\n        if (re.number.test(ph.type)) {\n          is_positive = arg >= 0;\n        }\n        switch (ph.type) {\n          case 'b':\n            arg = parseInt(arg, 10).toString(2);\n            break;\n          case 'c':\n            arg = String.fromCharCode(parseInt(arg, 10));\n            break;\n          case 'd':\n          case 'i':\n            arg = parseInt(arg, 10);\n            break;\n          case 'j':\n            arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);\n            break;\n          case 'e':\n            arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();\n            break;\n          case 'f':\n            arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);\n            break;\n          case 'g':\n            arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);\n            break;\n          case 'o':\n            arg = (parseInt(arg, 10) >>> 0).toString(8);\n            break;\n          case 's':\n            arg = String(arg);\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n          case 't':\n            arg = String(!!arg);\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n          case 'T':\n            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n          case 'u':\n            arg = parseInt(arg, 10) >>> 0;\n            break;\n          case 'v':\n            arg = arg.valueOf();\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n          case 'x':\n            arg = (parseInt(arg, 10) >>> 0).toString(16);\n            break;\n          case 'X':\n            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();\n            break;\n        }\n        if (re.json.test(ph.type)) {\n          output += arg;\n        } else {\n          if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n            sign = is_positive ? '+' : '-';\n            arg = arg.toString().replace(re.sign, '');\n          } else {\n            sign = '';\n          }\n          pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';\n          pad_length = ph.width - (sign + arg).length;\n          pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';\n          output += ph.align ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;\n        }\n      }\n    }\n    return output;\n  }\n  var sprintf_cache = Object.create(null);\n  function sprintf_parse(fmt) {\n    if (sprintf_cache[fmt]) {\n      return sprintf_cache[fmt];\n    }\n    var _fmt = fmt,\n      match,\n      parse_tree = [],\n      arg_names = 0;\n    while (_fmt) {\n      if ((match = re.text.exec(_fmt)) !== null) {\n        parse_tree.push(match[0]);\n      } else if ((match = re.modulo.exec(_fmt)) !== null) {\n        parse_tree.push('%');\n      } else if ((match = re.placeholder.exec(_fmt)) !== null) {\n        if (match[2]) {\n          arg_names |= 1;\n          var field_list = [],\n            replacement_field = match[2],\n            field_match = [];\n          if ((field_match = re.key.exec(replacement_field)) !== null) {\n            field_list.push(field_match[1]);\n            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n              if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else {\n                throw new SyntaxError('[sprintf] failed to parse named argument key');\n              }\n            }\n          } else {\n            throw new SyntaxError('[sprintf] failed to parse named argument key');\n          }\n          match[2] = field_list;\n        } else {\n          arg_names |= 2;\n        }\n        if (arg_names === 3) {\n          throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');\n        }\n        parse_tree.push({\n          placeholder: match[0],\n          param_no: match[1],\n          keys: match[2],\n          sign: match[3],\n          pad_char: match[4],\n          align: match[5],\n          width: match[6],\n          precision: match[7],\n          type: match[8]\n        });\n      } else {\n        throw new SyntaxError('[sprintf] unexpected placeholder');\n      }\n      _fmt = _fmt.substring(match[0].length);\n    }\n    return sprintf_cache[fmt] = parse_tree;\n  }\n\n  if (typeof exports !== 'undefined') {\n    exports['sprintf'] = sprintf;\n    exports['vsprintf'] = vsprintf;\n  }\n  if (typeof window !== 'undefined') {\n    window['sprintf'] = sprintf;\n    window['vsprintf'] = vsprintf;\n    if (typeof define === 'function' && define['amd']) {\n      define(function () {\n        return {\n          'sprintf': sprintf,\n          'vsprintf': vsprintf\n        };\n      });\n    }\n  }\n}();","map":{"version":3,"names":["re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","sprintf_format","sprintf_parse","arguments","vsprintf","fmt","argv","apply","concat","parse_tree","cursor","tree_length","length","arg","output","i","k","ph","pad","pad_character","pad_length","is_positive","keys","undefined","Error","param_no","test","type","Function","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","Object","prototype","call","slice","toLowerCase","valueOf","toUpperCase","replace","pad_char","charAt","repeat","align","sprintf_cache","create","_fmt","match","arg_names","exec","push","field_list","replacement_field","field_match","SyntaxError","exports","window","define"],"sources":["C:/Users/LENOVO/OneDrive/เอกสาร/GitHub/mdp-proj-2022/node_modules/react-native-countdown-component/node_modules/sprintf-js/src/sprintf.js"],"sourcesContent":["/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}