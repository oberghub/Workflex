{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from \"./DrawerItem\";\n\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n    drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n    drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    };\n    var _descriptors$route$ke = descriptors[route.key].options,\n      title = _descriptors$route$ke.title,\n      drawerLabel = _descriptors$route$ke.drawerLabel,\n      drawerIcon = _descriptors$route$ke.drawerIcon,\n      drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n      drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n      drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"mappings":";;;AAAA,SACEA,aADF,EAEEC,aAFF,EAKEC,cALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,UAAP;;AAWA,eAAe,SAASC,cAAT,OAIL;EAAA,IAHRC,KADqC,GAI7BC,KAHRD,KADqC;IAErCE,UAFqC,GAI7BD,KAFRC,UAFqC;IAGrCC,cACQF,KADRE;EAEA,IAAMC,SAAS,GAAGR,cAAc,EAAhC;EAEA,IAAMS,YAAY,GAAGL,KAAK,CAACM,MAAN,CAAaN,KAAK,CAACO,KAAnB,CAArB;EACA,IAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;EACA,IAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;EAEA,IACEC,qBADI,GAKFF,cALJ,CACEE,qBADI;IAEJC,uBAFI,GAKFH,cALJ,CAEEG,uBAFI;IAGJC,2BAHI,GAKFJ,cALJ,CAGEI,2BAHI;IAIJC,gCACEL,cALJ,CAIEK;EAGF,OAAOf,KAAK,CAACM,MAAN,CAAaU,GAAb,CAAiB,UAACC,KAAD,EAAQC,CAAR,EAAc;IACpC,IAAMC,OAAO,GAAGD,CAAC,KAAKlB,KAAK,CAACO,KAA5B;IAEA,IAAMa,OAAO,GAAG,SAAVA,OAAO,GAAS;MACpB,IAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAX,CAAgB;QAC5BC,IAAI,EAAE,iBADsB;QAE5BC,MAAM,EAAEP,KAAK,CAACR,GAFc;QAG5BgB,iBAAiB,EAAE;MAHS,CAAhB,CAAd;MAMA,IAAI,CAACJ,KAAK,CAACK,gBAAX,EAA6B;QAC3BxB,UAAU,CAACyB,QAAX,iCACMR,OAAO,GACPxB,aAAa,CAACiC,WAAd,EADO,GAEPlC,aAAa,CAACmC,QAAd,CAAuB;UAAEC,IAAI,EAAEb,KAAK,CAACa,IAAd;UAAoBC,KAAK,EAAE;QAA3B,CAAvB,CAFJ;UAGAP,MAAM,EAAExB,KAAK,CAACS;QAAAA,GAJhB;MAMD;IACF,CAfD;IAiBA,4BAOIN,WAAW,CAACc,KAAK,CAACR,GAAP,CAAX,CAAuBE,OAP3B;MACEqB,KADI,yBACJA,KADI;MAEJC,WAFI,yBAEJA,WAFI;MAGJC,UAHI,yBAGJA,UAHI;MAIJC,gBAJI,yBAIJA,gBAJI;MAKJC,eALI,yBAKJA,eALI;MAMJC;IAGF,OACExC,oBAACC,UAAD;MACEW,GAAG,EAAEQ,KAAK,CAACR,GADb;MAEE6B,KAAK,EACHL,WAAW,KAAKM,SAAhB,GACIN,WADJ,GAEID,KAAK,KAAKO,SAAV,GACAP,KADA,GAEAf,KAAK,CAACa,IAPd;MASEU,IAAI,EAAEN,UATR;MAUEf,OAAO,EAAEA,OAVX;MAWEsB,eAAe,EAAE7B,qBAXnB;MAYE8B,iBAAiB,EAAE7B,uBAZrB;MAaE8B,qBAAqB,EAAE7B,2BAbzB;MAcE8B,uBAAuB,EAAE7B,6BAd3B;MAeE8B,gBAAgB,EAAER,sBAfpB;MAgBES,UAAU,EAAEX,gBAhBd;MAiBEY,KAAK,EAAEX,eAjBT;MAkBEY,EAAE,EAAE5C,SAAS,CAACa,KAAK,CAACa,IAAP,EAAab,KAAK,CAACgC,MAAnB,CAlBf;MAmBE7B,OAAO,EAAEA;IAnBX,EADF;EAuBD,CApDM,CAAP;AAqDD","names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","_ref","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}