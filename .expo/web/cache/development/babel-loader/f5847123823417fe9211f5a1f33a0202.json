{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"to\", \"accessibilityRole\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar LinkPressable = function LinkPressable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      },\n      onLongPress: onLongPress !== null && onLongPress !== void 0 ? onLongPress : undefined,\n      onPressIn: onPressIn !== null && onPressIn !== void 0 ? onPressIn : undefined,\n      onPressOut: onPressOut !== null && onPressOut !== void 0 ? onPressOut : undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      allowFontScaling = props.allowFontScaling,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,0BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;;;;AAkFA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAgBhB;EAAA,IAfJC,QAeI,QAfJA,QAeI;EAAA,IAdJC,KAcI,QAdJA,KAcI;EAAA,IAbJC,QAaI,QAbJA,OAaI;EAAA,IAZJC,WAYI,QAZJA,WAYI;EAAA,IAXJC,SAWI,QAXJA,SAWI;EAAA,IAVJC,UAUI,QAVJA,UAUI;EAAA,IATJC,EASI,QATJA,EASI;EAAA,IARJC,iBAQI,QARJA,iBAQI;EAAA,IAPDC,IAOC;;EACJ,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyBH,EAA7B,EAAiC;IAG/B,OACER,oBAACH,IAAD,eACMa,IADN;MAEEF,EAAE,EAAEA,EAFN;MAGEL,KAAK,EAAE,CAACU,MAAM,CAACC,MAAR,EAAgBX,KAAhB,CAHT;MAIEC,OAAO,EAAGW,kBAAD,EAAY;QACnB,IACE,EAAEA,CAAC,CAACC,OAAFD,IAAaA,CAAC,CAACE,MAAfF,IAAyBA,CAAC,CAACG,OAA3BH,IAAsCA,CAAC,CAACI,QAA1C,MACCJ,CAAC,CAACD,MAAFC,IAAY,IAAZA,IAAoBA,CAAC,CAACD,MAAFC,KAAa,CADlC,CADF,EAGE;UACAA,CAAC,CAACK,cAAFL;UACAX,QAAO,SAAPA,YAAO,WAAPA,oBAAO,CAAGW,CAAH,CAAPX;QACD;MAXL;MAeEC,WAAW,EAAEA,WAAF,SAAEA,eAAF,WAAEA,iBAAegB,SAf9B;MAgBEf,SAAS,EAAEA,SAAF,SAAEA,aAAF,WAAEA,eAAae,SAhB1B;MAiBEd,UAAU,EAAEA,UAAF,SAAEA,cAAF,WAAEA,gBAAcc;IAjB5B,IAmBGnB,QAnBH,CADF;EAHF,OA0BO;IACL,OACEF,oBAACJ,iBAAD,eACMc,IADN;MAEED,iBAAiB,EAAEA,iBAFrB;MAGEL,OAAO,EAAEA;IAHX,IAKEJ,oBAACsB,IAAD;MAAMnB,KAAK,EAAEA;IAAb,GAAqBD,QAArB,CALF,CADF;EASD;AArDH;;AA2DA,eAAe,SAASqB,UAAT,CAAoBC,KAApB,EAAkC;EAC/C,gBAAmB1B,QAAQ,EAA3B;EAAA,IAAQ2B,MAAR,aAAQA,MAAR;;EAEA,IACEC,IADF,GAgBIF,KAhBJ,CACEE,IADF;EAAA,IAEEC,KAFF,GAgBIH,KAhBJ,CAEEG,KAFF;EAAA,IAGEC,UAHF,GAgBIJ,KAhBJ,CAGEI,UAHF;EAAA,IAIEpB,EAJF,GAgBIgB,KAhBJ,CAIEhB,EAJF;EAAA,qBAgBIgB,KAhBJ,CAKEK,OALF;EAAA,IAKEA,OALF,+BAKY,KALZ;EAAA,IAMEC,gBANF,GAgBIN,KAhBJ,CAMEM,gBANF;EAAA,4BAgBIN,KAhBJ,CAOEO,eAPF;EAAA,IAOEA,eAPF,sCAOoBN,MAAM,CAACO,OAP3B;EAAA,4BAgBIR,KAhBJ,CAQES,iBARF;EAAA,IAQEA,iBARF,sCAQsBlC,KAAK,CAAC0B,MAAM,CAACS,IAAR,CAALnC,CAAmBoC,KAAnBpC,CAAyB,IAAzBA,EAA+BqC,GAA/BrC,GAAqCsC,MAArCtC,EARtB;EAAA,4BAgBIyB,KAhBJ,CASEc,qBATF;EAAA,IASEA,qBATF,sCAS0BvC,KAAK,CAACgC,eAAD,CAALhC,CAAuBoC,KAAvBpC,CAA6B,IAA7BA,EAAmCqC,GAAnCrC,GAAyCsC,MAAzCtC,EAT1B;EAAA,4BAgBIyB,KAhBJ,CAUEe,uBAVF;EAAA,IAUEA,uBAVF,sCAU4B,aAV5B;EAAA,IAWEpC,KAXF,GAgBIqB,KAhBJ,CAWErB,KAXF;EAAA,IAYEC,OAZF,GAgBIoB,KAhBJ,CAYEpB,OAZF;EAAA,IAaEoC,UAbF,GAgBIhB,KAhBJ,CAaEgB,UAbF;EAAA,IAcEC,YAdF,GAgBIjB,KAhBJ,CAcEiB,YAdF;EAAA,IAeK/B,IAfL,4BAgBIc,KAhBJ;;EAkBA,0BAA6BkB,UAAU,CAACC,OAAXD,CAAmBvC,KAAK,IAAI,EAA5BuC,CAA7B;EAAA,gDAAQE,YAAR;EAAA,IAAQA,YAAR,sCAAuB,CAAvB;;EACA,IAAMC,KAAK,GAAGhB,OAAO,GAAGE,eAAH,GAAqBE,iBAA1C;EACA,IAAMa,eAAe,GAAGjB,OAAO,GAC3BS,qBAD2B,GAE3BC,uBAFJ;EAIA,IAAMQ,QAAQ,GAAGrB,IAAI,GAAGA,IAAI,CAAC;IAAEsB,IAAI,EAAE,EAAR;IAAYnB,OAAZ,EAAYA,OAAZ;IAAqBgB;EAArB,CAAD,CAAP,GAAwC,IAA7D;EAEA,OACE7C,oBAACsB,IAAD;IACE2B,WAAW,EAAE;EADf,GAEMvC,IAFN;IAGEP,KAAK,EAAE,CAACU,MAAM,CAACqC,SAAR,EAAmB;MAAEN,YAAF,EAAEA,YAAF;MAAgBE;IAAhB,CAAnB,EAAsD3C,KAAtD;EAHT,IAKEH,oBAACC,aAAD;IACEG,OAAO,EAAEA,OADX;IAEED,KAAK,EAAE,CAACU,MAAM,CAACsC,OAAR,EAAiB;MAAEP;IAAF,CAAjB,CAFT;IAGEnC,iBAAiB,EAAC,QAHpB;IAIE2C,kBAAkB,EAAE;MAAEC,QAAQ,EAAExB;IAAZ,CAJtB;IAKEW,UAAU,EAAEA,UALd;IAMEC,YAAY,EAAEA,YANhB;IAOEjC,EAAE,EAAEA;EAPN,GASER,oBAACA,KAAD,CAAOsD,QAAP,QACGP,QADH,EAEE/C,oBAACsB,IAAD;IACEnB,KAAK,EAAE,CACLU,MAAM,CAACc,KADF,EAEL;MAAE4B,UAAU,EAAER,QAAQ,GAAG,EAAH,GAAQ,CAA9B;MAAiCS,cAAc,EAAE;IAAjD,CAFK;EADT,GAMG,OAAO7B,KAAP,KAAiB,QAAjB,GACC3B,oBAACyD,IAAD;IACEC,aAAa,EAAE,CADjB;IAEE5B,gBAAgB,EAAEA,gBAFpB;IAGE3B,KAAK,EAAE,CACL;MACE0C,KADF,EACEA,KADF;MAEEc,UAAU,EAAE;IAFd,CADK,EAKL/B,UALK;EAHT,GAWGD,KAXH,CADD,GAeCA,KAAK,CAAC;IAAEkB,KAAF,EAAEA,KAAF;IAAShB;EAAT,CAAD,CArBT,CAFF,CATF,CALF,CADF;AA6CD;AAED,IAAMhB,MAAM,GAAG6B,UAAU,CAACkB,MAAXlB,CAAkB;EAC/BQ,SAAS,EAAE;IACTW,gBAAgB,EAAE,EADT;IAETL,cAAc,EAAE,CAFP;IAGTM,QAAQ,EAAE;EAHD,CADoB;EAM/BX,OAAO,EAAE;IACPY,aAAa,EAAE,KADR;IAEPC,UAAU,EAAE,QAFL;IAGPC,OAAO,EAAE;EAHF,CANsB;EAW/BtC,KAAK,EAAE;IACLuC,WAAW,EAAE,EADR;IAELC,IAAI,EAAE;EAFD,CAXwB;EAe/BrD,MAAM,EAAE;IACNsD,OAAO,EAAE;EADH;AAfuB,CAAlB1B,CAAf","names":["PlatformPressable","Link","useTheme","Color","React","LinkPressable","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","View","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","Text","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}