{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\n\nvar REANIMATED_AVAILABLE = (Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue) !== undefined;\nvar setGestureState = Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.setGestureState;\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 463937378312;\n          _f.__location = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\\\u0E40\\u0E2D\\u0E01\\u0E2A\\u0E32\\u0E23\\\\GitHub\\\\mdp-proj-2022\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (14:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5304131972715;\n          _f.__location = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\\\u0E40\\u0E2D\\u0E01\\u0E2A\\u0E32\\u0E23\\\\GitHub\\\\mdp-proj-2022\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (23:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 180936263236;\n          _f.__location = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\\\u0E40\\u0E2D\\u0E01\\u0E2A\\u0E32\\u0E23\\\\GitHub\\\\mdp-proj-2022\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (32:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 14407529741256;\n          _f.__location = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\\\u0E40\\u0E2D\\u0E01\\u0E2A\\u0E32\\u0E23\\\\GitHub\\\\mdp-proj-2022\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (41:11)\";\n          return _f;\n        }()\n      };\n    };\n    _f._closure = {\n      REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n      setGestureState: setGestureState,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3925022521265;\n    _f.__location = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\\\u0E40\\u0E2D\\u0E01\\u0E2A\\u0E32\\u0E23\\\\GitHub\\\\mdp-proj-2022\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT;AACA,SAASC,KAAT;AACA,SAASC,UAAT;AASA,IAAMC,cAAc,GAAGD,UAAU,CAC/B,kFAD+B,CAAjC;;AAMA,IAAME,oBAAoB,GAAG,WAAU,SAAV,cAAU,WAAV,sBAAU,CAAEC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEO,eAApC;AAEA,OAAO,IAAMC,mBAAmB,GAAG;EACjCC,MAAM;IAAA,qBAACC,UAAD,EAA8C;MAElD,OAAO;QACLC,KAAK;UAAA,uBAAQ;YAEX,IAAIP,oBAAJ,EAA0B;cACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACW,KAAnB,CAAf;YACD,CAFD,MAEO;cACLC,OAAO,CAACC,IAAR,CAAaX,cAAb;YACD;UACF,CARI;UAAA;YAAA,sBArBXC;YAAA,iBASAG,eAAMJ;YAAAA,YAAcO,UAAGR;YAAAA;cAAAA,YACrB;YAAA;YAAA;;;;;;WAWS;QAULa,QAAQ;UAAA,uBAAQ;YAEd,IAAIX,oBAAJ,EAA0B;cACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACe,MAAnB,CAAf;YACD,CAFD,MAEO;cACLH,OAAO,CAACC,IAAR,CAAaX,cAAb;YACD;UACF,CAjBI;UAAA;YAAA,sBArBXC;YAAA,iBASAG,eAAMJ;YAAAA,YAAcO,UAAGR;YAAAA;cAAAA,aACrB;YAAA;YAAA;;;;;;WAWS;QAmBLe,IAAI;UAAA,uBAAQ;YAEV,IAAIb,oBAAJ,EAA0B;cACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACiB,MAAnB,CAAf;YACD,CAFD,MAEO;cACLL,OAAO,CAACC,IAAR,CAAaX,cAAb;YACD;UACF,CA1BI;UAAA;YAAA,sBArBXC;YAAA,iBASAG,eAAMJ;YAAAA,YAAcO,UAAGR;YAAAA;cAAAA,aACrB;YAAA;YAAA;;;;;;WAWS;QA4BLiB,GAAG;UAAA,uBAAQ;YAET,IAAIf,oBAAJ,EAA0B;cACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACmB,GAAnB,CAAf;YACD,CAFD,MAEO;cACLP,OAAO,CAACC,IAAR,CAAaX,cAAb;YACD;UACF;UAAA;YAAA,sBAxDPC;YAAA,iBASAG,eAAMJ;YAAAA,YAAcO,UAAGR;YAAAA;cAAAA,UACrB;YAAA;YAAA;;;;;;;MAWS,CAAP;IAqCD;IAAA;MAAA;uBAhBKK,eAAIH;MAAAA;QAAAA,OA1BSH,WAAGD;QAAAA,QAQUC;QAAA,QASAA;QAAA,KASAA;MAAA;MAAA,gBAEnBE;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AA1BoB,CAA5B","names":["Reanimated","State","tagMessage","warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","GestureStateManager","create","handlerTag","begin","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}